Input:

The following table represents the valuations of 2 agents numbered 0,1,2, and so on for 3 items.  numbered 0,1,2, and so on. For example, the value agent 1 has of item 2 is 0.19.

      0     1      2
0  4.65  3.53  27.63
1  2.98  2.67   0.19

Fairly allocate all the items to the agents so that each agent gets an integer number of items.

Model: GPT4o
Type of distribution: exponential
Temperature: 0.7

Output:

To fairly allocate items among the agents, we’ll look for a solution that maximizes each agent’s total valuation based on the items they receive. Since there are only two agents and three items, one of the agents will receive two items, while the other will receive one.

Here’s the approach to finding a fair allocation:

	1.	List Possible Allocations: There are three possible allocations where each agent gets an integer number of items, specifically one receives two items, and the other receives one:
	•	Agent 0 gets items (0, 1) and Agent 1 gets item (2).
	•	Agent 0 gets items (0, 2) and Agent 1 gets item (1).
	•	Agent 0 gets items (1, 2) and Agent 1 gets item (0).
	2.	Calculate Total Valuations for Each Allocation: For each allocation, we will calculate the total valuation for each agent based on the items they receive.
	3.	Choose the Allocation that Maximizes Fairness: We’ll aim for the allocation where each agent’s valuation of their items is as balanced as possible.

Let’s compute the valuations for each allocation and find the most balanced one.

*Runs this code*

import pandas as pd

# Define the valuation table
valuations = pd.DataFrame({
    0: [4.65, 2.98],
    1: [3.53, 2.67],
    2: [27.63, 0.19]
}, index=["Agent 0", "Agent 1"])

# Define possible allocations
allocations = {
    "Allocation 1": {"Agent 0": [0, 1], "Agent 1": [2]},
    "Allocation 2": {"Agent 0": [0, 2], "Agent 1": [1]},
    "Allocation 3": {"Agent 0": [1, 2], "Agent 1": [0]}
}

# Calculate total valuations for each allocation
results = {}
for allocation_name, allocation in allocations.items():
    results[allocation_name] = {
        "Agent 0 Valuation": sum(valuations.loc["Agent 0", allocation["Agent 0"]]),
        "Agent 1 Valuation": sum(valuations.loc["Agent 1", allocation["Agent 1"]]),
        "Difference": abs(sum(valuations.loc["Agent 0", allocation["Agent 0"]]) -
                          sum(valuations.loc["Agent 1", allocation["Agent 1"]]))
    }

# Convert results to a DataFrame for easy viewing
results_df = pd.DataFrame(results).T
results_df.sort_values(by="Difference", inplace=True)  # Sort by smallest difference for fairness

import ace_tools as tools; tools.display_dataframe_to_user(name="Fair Allocations Results", dataframe=results_df)

*Generates the following output:*

	Agent 0 Valuation	Agent 1 Valuation	Difference
Allocation 1	8.18	0.19	7.990000000000000
Allocation 3	31.16	2.98	28.18
Allocation 2	32.28	2.67	29.61


I’ve displayed the calculated valuations for each allocation. 
The allocation with the smallest difference between the agents’ valuations is typically the fairest, 
as it brings their respective valuations closer together. Let me know if you’d like to proceed 
with this allocation or if you need any adjustments. 